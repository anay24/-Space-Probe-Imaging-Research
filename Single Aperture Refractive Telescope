%%% Single Aperture Refractive Telescope Research Code
%%% Research at the Georgia Institute of Technology's
%%% Space Systems Design Lab with Professor Hirabayashi
%%% Anay Naik April 2024

clear; 
clc; 
close all

    %% INPUT VARIABLES
% A prompt shows up when the code is run for the user to directly input the
% focal length, height, angle, and pixel count.
    inputQuestions = {'What is the focal length in centimeters (f)?','What is the height in centimeters (h)?','What is the boresight to surface angle in degrees (theta)?','What is the input pixel count?'};
    inputTitle = 'Refractive Telescope Input Variables';
    inputSize = [1 65];
    inputPresets = {'20','100','0','1024'};
    inputAnswer = inputdlg(inputQuestions,inputTitle,inputSize,inputPresets);
    
    f = str2double(inputAnswer{1});
    h = str2double(inputAnswer{2});
    theta = str2double(inputAnswer{3});
    pixcount = str2double(inputAnswer{4}); 

%Error mitigation for inputs not being negative
if f < 0 || h < 0 || theta < 0 || h+f == 0
     promptMessaget = sprintf('INPUT ERROR\nInputs must be positive.');
        buttont = questdlg(promptMessaget, 'INPUT ERROR','Ok','Ok');
        if strcmp(buttont, 'Ok')
            return; 
        end 
end  
    %% BUILDING X ARRAY
% If the pixel count is even, then the code splits the pixel count in half
% and creates half negative and half positive numbers 
    %Example: if pixcount = 6 then xarray = [-3,-2,-1,1,2,3]
    if rem(pixcount,2) == 0 && pixcount > 1 && isreal(pixcount) && (rem(pixcount,1) == 0)
        split = pixcount/2;
        si = [-split:-1];
        sj = [1:split];
        xarray = [si sj];
% If the pixel count is odd, then the code splits the pixel count in half
% and creates half negative and half positive numbers and puts a zero in
% between
    %Example: if pixcount = 7 then xarray = [-3,-2,-1,0,1,2,3]
    elseif rem(pixcount,2) == 1 && pixcount > 1 && isreal(pixcount) && (rem(pixcount,1) == 0)
        splitcount = pixcount-1;
        split = splitcount/2;
        si = [-split:-1];
        sj = [1:split];
        xarray = [si 0 sj];
 % This is error mitigation for inputs 
 % if pixel count is neither odd or even, then the code cannot function
    else
       promptMessaget = sprintf('INPUT ERROR\nPixel count is not feasible.');
        buttont = questdlg(promptMessaget, 'INPUT ERROR','Ok','Ok');
        if strcmp(buttont, 'Ok')
            return; 
        end 
    end

   %% FORMULAS

   i = 1000*xarray; %ith pixel = d*i
   hfratio = (h/f);
   fhratio = (f/h);
   absfhratio = abs(fhratio);
   z = xarray*hfratio; %z = i*d*(h/f)
   l = z/cos(theta); %z = l*cos(theta)
   hprime = h + l*sin(theta); % hprime = h + l*sin(theta)
   diffh = l*sin(theta); 
   xarrayoutput = z;

    if theta == 0 %when there is no angle, the y array stays constant at h+f
        youtput = h + f; 
        yarrayoutput = youtput*ones(1,pixcount);
    else %when there is angle, the y array is hprime+f but hprime changes
        youtput = hprime + f;
        yarrayoutput = youtput;
    end
   

    %% PRINTING ARRAYS

    fprintf(['X Array: ' repmat(' %1.0f ',1,numel(xarrayoutput)) '\n'],xarrayoutput);
    fprintf(['Y Array: ' repmat(' %1.0f ',1,numel(yarrayoutput)) '\n'],yarrayoutput);
    disp('CODE EXECUTION COMPLETE');
